var VuexInstantsPlugin=function(t){var n={};function r(e){if(n[e])return n[e].exports;var o=n[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)r.d(e,o,function(n){return t[n]}.bind(null,o));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=0)}([function(t,n,r){"use strict";function e(t,n,r){if(void 0===n&&(n=""),void 0===r&&(r=TypeError),!t())throw new r(n)}r.r(n);var o={get:function(t,n){if(n in t)return t[n];if(t.data){if(n in t.data[0])return function(t,n){var r=t.root.state,o=r[n];e((function(){return!!o}));var u=t.data.flatMap((function(t){return t[n]})).map((function(t){return o.byIds[t]})),i=r[n].hasAndBelongsToMany;return new f(u,t.root,n,i)}(t,n);if(t.hasAndBelongsToMany&&t.hasAndBelongsToMany[n])return function(t,n){var r=t.root.state,o=t.hasAndBelongsToMany&&t.hasAndBelongsToMany[n];e((function(){return!!o}));var u=o.associationForeignKey,i=o.foreignKey,a=o.joinName,s=o.theirName,c=r[a],l=r[s];e((function(){return!!c&&!!l}));var d=Object.values(c.byIds),p=t.data.flatMap((function(t){return d.filter((function(n){return n[i]===t.id}))})).map((function(t){return l.byIds[t[u]]})),y=r[s].hasAndBelongsToMany;return new f(p,t.root,s,y)}(t,n);if(function(t){return/\d+/.test(t)}(n))return t.data[n];if("length"===n)return t.data.length;if("function"==typeof t.data[n])return t.data[n].bind(t.data)}throw new TypeError("知らんがな: "+n+".")}};var u,i=function(){return(i=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t}).apply(this,arguments)},a=function(){function t(t,n,r,o){this.nextIdx=0,e((function(){return Array.isArray(t)}),t+" must be type Array."),this.name=r,this.root=n,this.data=t,this.hasAndBelongsToMany=o}return t.prototype[Symbol.iterator]=function(){var t=this.data,n=this.nextIdx;return{next:function(){var r;return n<t.length&&(r=t[n])?(n+=1,{value:r,done:!1}):{value:r,done:!0}}}},t.prototype.pluck=function(t){return this.data.flatMap((function(n){return t.reduce((function(t,r){var e;return i(i({},t),((e={})[r]=n[r],e))}),{})}))},t.prototype.ids=function(){return this.data.map((function(t){return t.id}))},t}(),f=function(t,n,r,e){var u=new a(t,n,r,e);return new Proxy(u,o)},s=(u=function(t,n){return(u=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(t,n)},function(t,n){function r(){this.constructor=t}u(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}),c=function(){return(c=Object.assign||function(t){for(var n,r=1,e=arguments.length;r<e;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t}).apply(this,arguments)};n.default={install:function(){window.Vuex.Store=function(t){function n(n){return function t(n){if(n&&(n.instants=c(c({},d),n.instants),n.modules))for(var r=0,e=Object.values(n.modules);r<e.length;r++){t(e[r])}}(n),function t(n){if(n&&(n.instants&&(n.getters=n.getters||{},n.getters=c(c({},n.getters),n.instants)),n.modules))for(var r=0,e=Object.values(n.modules);r<e.length;r++){t(e[r])}}(n),t.call(this,n)||this}return s(n,t),n}(window.Vuex.Store),window.Vuex.Store.prototype.capture=function(t,n){var r=this;e((function(){return!r.instants||t in r.instants}),"\n"+t+" is not defined in store.instans.\n\nDon't you forget adding "+t+" in store.instans?\n");var o=Object.getOwnPropertyDescriptor(this.getters,t);if(o){e((function(){return!!o.get}),"Unknown getter, "+t);var u=o.get.call(this)(n),i=function(t){var n=t.split("/").slice(0,-1);return n[n.length-1]}(t),a=this.state[i].hasAndBelongsToMany;return Array.isArray(u)?new f(u,this,i,a):u}}}};var l=function(t,n,r){return t.filter((function(t){for(var e=n[t],o=0,u=Object.entries(r);o<u.length;o++){var i=u[o],a=i[0],f=i[1];if("function"==typeof f){if(!f(e))return!1}else if(e[a]!==f)return!1}return!0})).map((function(t){return n[t]}))},d={where:function(t){var n=t.allIds,r=t.byIds;return function(t){return l(n,r,t)}},findBy:function(t){var n=t.allIds,r=t.byIds;return function(t){var o=l(n,r,t);return e((function(){return o&&o[0]}),"Record not found."),o[0]}},find:function(t){var n=t.byIds;return function(t){var r=n[t];return e((function(){return!!r}),"not found "+t),r}}}}]).default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,